import { Col, Form, Input, InputNumber, Row, Select, theme } from 'antd'
import { useEffect, useReducer, useState } from 'react'
import { DndContext } from '@dnd-kit/core'
import { useDroppable } from '@dnd-kit/core'
import { useDraggable } from '@dnd-kit/core'
import PropTypes from 'prop-types'
import api from '../axios-proxy'
import InfiniteScroll from 'react-infinite-scroll-component'
import { useDebounce } from 'react-use'
import { HolderOutlined, NumberOutlined } from '@ant-design/icons'
import AvatarGroup from './AvatarGroup'

const cardReducer = (state, action) => {
    if (action.type === 'SET_COLUMNS') {
        const columnsItems = action.payload.map((c) => {
            //create cards state per column
            return {
                columnId: c.id,
                prev: undefined,
                next: 2,
                last: 1000,
                data: [],
            }
        })
        return { columnsItems, columns: action.payload }
    }

    if (action.type === 'ADD_NEW_CARDS') {
        let newState = { ...state }
        newState.columnsItems.forEach((columnItem, index) => {
            if (action.payload.columnId === columnItem.columnId) {
                //find the column

                newState.columnsItems[index] = {
                    columnId: action.payload.columnId,
                    ...action.payload.responseData,
                    data: [
                        ...(columnItem.data || []),
                        ...action.payload.responseData?.data,
                    ],
                }
            }
        })

        return newState
    }

    if (action.type === 'MOVE_CARD') {
        const newState = { ...state }

        newState.columnsItems.forEach((columnItem) => {
            if (
                +action.payload.currentColumn === +action.payload.targetColumn
            ) {
                // if current and targe is the same do nothing
                return state
            }

            if (+columnItem.columnId === action.payload.currentColumn) {
                // remove card from current column

                columnItem.data = columnItem.data.filter((card) => {
                    return card.id !== action.payload.cardId
                })
            }

            if (columnItem.columnId === action.payload.targetColumn) {
                // add card to target column
                columnItem.data.push({
                    id: action.payload.cardId,
                    columnId: +action.payload.targetColumn,
                })
            }
        })
        return newState
    }
}

const Kanbanboard = () => {
    const [tableIsloading, setTableIsLoading] = useState(false)

    const [state, dispatch] = useReducer(cardReducer, {
        columns: [],
        columnsItems: [],
    })

    const [toolbarForm] = Form.useForm()

    const [size, setSize] = useState(5)

    async function dragEndHandler(e) {
        // api.patch('api/somet-endpoint', {
        //     cardId: e.active.id,
        //     newState: e.over.id,
        // })
        //     .then((res) => {
        //         console.log('hello')
        //         dispatch({
        //             type: 'MOVE_CARD',

        //             payload: {
        //                 cardId: e.active.id,
        //                 currentColumn: e.active.data.current.columnId,
        //                 targetColumn: e.over.id,
        //             },
        //         })
        //     })
        //     .catch((err) => {
        //         console.log(err)
        //     })
        dispatch({
            type: 'MOVE_CARD',

            payload: {
                cardId: e.active.id,
                currentColumn: e.active.data.current.columnId,
                targetColumn: e.over.id,
            },
        })
    }

    const fetchColumns = () => {
        setTableIsLoading(true)
        api.get(`http://localhost:3000/columns/`)
            .then((res) => {
                dispatch({ type: 'SET_COLUMNS', payload: res.data })
            })
            .catch((err) => {
                console.log(err)
            })
            .finally(() => {
                setTableIsLoading(false)
            })
    }

    const sizeChangeHandler = (value) => {
        const sizeValue = toolbarForm.getFieldValue('size')
        setSize(value)
    }

    const formChangeHandler = () => {
        useDebounce(() => {
            fetchColumns()
        }, [])
    }

    useEffect(() => {
        fetchColumns()
    }, [])

    if (tableIsloading || !state.columns) return <>wait...</>

    return (
        <div id="kanban-container" style={{ position: 'relative' }}>
            <DndContext onDragEnd={dragEndHandler}>
                <ToolBar
                    form={toolbarForm}
                    size={size}
                    onFormChange={formChangeHandler}
                    onSizeChange={sizeChangeHandler}
                />

                <div style={{ display: 'flex' }}>
                    {state.columns &&
                        state.columns.map((column) => (
                            <Column
                                key={column.id}
                                size={size}
                                columnsItems={state.columnsItems}
                                dispatch={dispatch}
                                state={state}
                                {...column}
                            />
                        ))}
                </div>
            </DndContext>
        </div>
    )
}

function Column(props) {
    const { isOver, setNodeRef } = useDroppable({
        id: props.id,
    })

    const { token } = theme.useToken()
    const { columnsItems, dispatch } = props
    let cardsData = props.state.columnsItems?.find(
        (c) => c.columnId === props.id
    )

    // const [cardsData, setCardsData] = useState()

    const fetchCards = (colId, page, size) => {
        api.get(
            `http://localhost:3000/col${colId}?_page=${page}&_per_page=${size}`
        )
            .then((res) => {
                dispatch({
                    type: 'ADD_NEW_CARDS',
                    payload: { columnId: colId, responseData: res.data },
                })
            })
            .catch((err) => {
                console.log(err)
            })
    }

    useEffect(() => {
        fetchCards(props.id, 1, props.size)
    }, [])

    useEffect(() => {
        props.state.columnsItems?.find((c) => c.columnId === props.id)
    }, [props.state])

    const style = {
        flex: 1,
        padding: 2,
        height: '100%',
        display: 'flex',
        margin: '0px 2px',
        alignItems: 'flex-start',
        flexDirection: 'column',
        backgroundColor: isOver
            ? token.colorBgTextActive
            : token.colorBgTextHover,
    }

    return (
        <div ref={setNodeRef} style={style}>
            <div
                style={{
                    display: 'flex',
                    justifyContent: 'center',
                    top: '3rem',
                    width: '100%',
                    position: 'sticky',
                    backgroundColor: 'rgb(165, 165, 165)',
                    // backgroundColor:token.colorPrimary,
                    padding: '.3rem 0',
                    color: 'white',
                }}
            >
                ستون شماره {props.id}
            </div>
            <div
                id="scrollableDiv"
                style={{ width: '100%', padding: '0.5rem' }}
            >
                <InfiniteScroll
                    height={'30rem'}
                    // width={'200px'}
                    style={{
                        display: 'flex',
                        flex: '1 1 auto',
                        flexDirection: 'column',
                        alignItems: 'center',
                    }}
                    dataLength={cardsData?.data?.length || 0}
                    next={() => {
                        fetchCards(props.id, cardsData?.next, props.size)
                    }}
                    hasMore={cardsData?.next < cardsData?.last}
                    loader={null}
                    endMessage={null}
                    scrollableTarget="scrollableDiv"
                >
                    {cardsData?.data?.length > 0 ? (
                        cardsData?.data?.map((card) => (
                            <Card key={card.id} {...card} />
                        ))
                    ) : (
                        <span>آیتمی وجود ندارد.</span>
                    )}
                </InfiniteScroll>
            </div>
        </div>
    )
}
Column.propTypes = {
    id: PropTypes.string,
    name: PropTypes.string,
    children: PropTypes.object,
}

function Card(props) {
    const { attributes, listeners, setNodeRef, transform } = useDraggable({
        id: props.id,
        data: { columnId: props.columnId },
    })
    const style = transform
        ? {
              transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,
          }
        : undefined

    const { token } = theme.useToken()

    const items = [
        {
            key: '1',
            title: 'title',
            label: 'عنوان',
            children: props?.title || '__',
        },
        {
            key: '2',
            title: 'description',
            label: 'توضیحات',
            children: props?.description || '__',
        },
    ]
    return (
        <div
            {...listeners}
            {...attributes}
            ref={setNodeRef}
            style={{
                userSelect: 'none',
                minWidth: '250px',
                // maxWidth: '250px',
                // height:"fit-content",
                minHeight: 130,
                margin: '5px 0px',
                padding: '5px 10px',
                borderRadius: token.borderRadius,
                backgroundColor: token.colorBgContainer,
                border: `1px solid ${token.colorBorderSecondary}`,
                boxShadow: token.boxShadow,
                // zIndex: '1000',
                ...style,
            }}
        >
            <Row
                gutter={24}
                style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                }}
            >
                <Col
                    xs={8}
                    style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        // padding: '5px 10px',
                    }}
                >
                    <span style={{ fontSize: '12px' }}>
                        <NumberOutlined />{' '}
                        <span>
                            {props.number}
                            {props.id}
                        </span>
                    </span>
                </Col>

                <Col lg={13} style={{ padding: '0' }}>
                    <div>
                        <span style={{ fontSize: '12px' }}>عنوان: </span>
                        <span>_</span>
                    </div>
                </Col>

                <Col lg={3}>
                    <div
                        {...listeners}
                        {...attributes}
                        style={{ width: 10, cursor: 'move' }}
                    >
                        <HolderOutlined style={{ fontSize: 15 }} />
                    </div>
                </Col>
            </Row>

            <Row gutter={24}>
                <Col style={{ margin: '1rem 0' }}>
                    <div style={{ fontSize: '10px' }}>
                        <span>تاریخ ایجاد:</span> <span>1403/2/2</span>
                    </div>
                </Col>
            </Row>
            <Row
                gutter={24}
                style={{ display: 'flex', justifyContent: 'space-between' }}
            >
                <Col xs={12}>
                    <AvatarGroup role={'مسئول'} data={props.liables} />{' '}
                </Col>
                <Col>
                    <AvatarGroup role={'سرپرست'} data={props.supervisors} />
                </Col>
            </Row>

            <footer>
                <dl
                    style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        padding: '0 1rem',
                    }}
                ></dl>
            </footer>
        </div>
    )
}
Card.propTypes = {
    id: PropTypes.string,
    title: PropTypes.string,
    content: PropTypes.object,
    footer: PropTypes.object,
}

const ToolBar = ({ form, size, onFormChange, onSizeChange }) => {
    const resoursesList = [
        {
            value: 'lead',
            label: 'سرنخ',
        },
        {
            value: 'account',
            label: 'حساب',
        },
        {
            value: 'oppertunity',
            label: 'فرصت',
        },
        {
            value: 'activity',
            label: 'فعالیت',
        },
        {
            value: 'ticket',
            label: 'تیکت',
        },
        {
            value: 'project',
            label: 'پروژه',
        },
        {
            value: 'icvoice',
            label: 'فاکتور',
        },
        {
            value: 'payment',
            label: 'پرداخت',
        },
    ]

    return (
        <>
            <Form
                form={form}
                onChange={onFormChange}
                style={{
                    position: 'sticky',
                    top: '0',
                    padding: '0.5rem 0.5rem',
                    background: 'white',
                    height: 'fit-content',
                }}
                initialValues={{ size: 5 }}
            >
                <Row
                    style={{ display: 'flex', alignItems: 'center' }}
                    gutter={24}
                >
                    <Col xs={24} lg={8}>
                        <Form.Item
                            style={{ height: 'fit-content' }}
                            name="resource"
                            label={`منبع`}
                        >
                            <Select
                                defaultValue="lead"
                                style={{ width: '100' }}
                                options={resoursesList}
                            />
                        </Form.Item>
                    </Col>

                    <Col xs={24} lg={8}>
                        <Form.Item
                            name="search-query"
                            label={`جستجو`}
                            style={{ height: 'fit-content' }}
                        >
                            <Input />
                        </Form.Item>
                    </Col>

                    <Col xs={24} lg={8}>
                        <Form.Item
                            name="size"
                            label={`اندازه`}
                            style={{ height: 'fit-content' }}
                        >
                            <InputNumber
                                onChange={onSizeChange}
                                defaultValue={size}
                                value={size}
                            />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </>
    )
}

export default Kanbanboard
