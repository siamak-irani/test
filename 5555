import React, { act, useEffect, useReducer, useState } from 'react'
import ReactDOM from 'react-dom'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import api from '../../axios-proxy'
import InfiniteScroll from 'react-infinite-scroll-component'
import { Col, Form, Input, InputNumber, Row, Select, theme } from 'antd'
import { HolderOutlined, NumberOutlined } from '@ant-design/icons'
import AvatarGroup from '../AvatarGroup'

// fake data generator
const getItems = (count, offset = 0) =>
    Array.from({ length: count }, (v, k) => k).map((k) => ({
        id: `item-${k + offset}-${new Date().getTime()}`,
        content: `item ${k + offset}`,
    }))

const reorder = (list, startIndex, endIndex) => {
    const result = Array.from(list)
    const [removed] = result.splice(startIndex, 1)
    result.splice(endIndex, 0, removed)

    return result
}

/**
 * Moves an item from one list to another list.
 */
const move = (source, destination, droppableSource, droppableDestination) => {
    const sourceClone = Array.from(source)
    const destClone = Array.from(destination)
    const [removed] = sourceClone.splice(droppableSource.index, 1)

    destClone.splice(droppableDestination.index, 0, removed)

    const result = {}
    result[droppableSource.droppableId] = sourceClone
    result[droppableDestination.droppableId] = destClone

    return result
}
const grid = 8

const getItemStyle = (isDragging, draggableStyle) => ({
    // some basic styles to make the items look a bit nicer
    userSelect: 'none',
    padding: grid * 2,
    margin: `0 0 ${grid}px 0`,

    // change background colour if dragging
    background: isDragging ? 'lightgreen' : 'grey',

    // styles we need to apply on draggables
    ...draggableStyle,
})
const getListStyle = (isDraggingOver) => ({
    background: isDraggingOver ? 'lightblue' : 'lightgrey',
    padding: grid,
    width: '100%',
})

const cardReducer = (state, action) => {
    if (action.type === 'SET_COLUMNS') {
        const columnsItems = action.payload.map((c) => {
            //create cards state per column
            return {
                columnId: c.id,
                prev: undefined,
                next: 2,
                last: 1000,
                data: [],
            }
        })
        return { columnsItems, columns: action.payload }
    }

    if (action.type === 'ADD_NEW_CARDS') {
        let newState = { ...state }
        newState.columnsItems.forEach((columnItem, index) => {
            if (+action.payload.columnId === +columnItem.columnId) {
                //find the column
                newState.columnsItems[index] = {
                    columnId: action.payload.columnId,
                    ...action.payload.responseData,
                    data: [
                        ...(columnItem.data || []),
                        ...action.payload.responseData?.data,
                    ],
                }
            }
        })
        return newState
    }

    if (action.type === 'MOVE_CARD') {
        const newState = { ...state }
        const { cardId, source, destination } = action.payload

        const {
            sourceIndex = source.index,
            sourceColumnId = +source.droppableId + 1,
        } = source

        const {
            destinationIndex = destination.index,
            destinationColumnId = +destination.droppableId + 1,
        } = destination

        newState.columnsItems.forEach((c) => {
            if (+sourceColumnId === destinationColumnId) {
                // If source and destination are the same, do nothing.
                return state
            }

            if (+c.columnId === sourceColumnId) {
                // remove card from current column
                c.data.splice(sourceIndex, 1)
            }

            if (c.columnId === destinationColumnId) {
                // add card to target column

                c.data.splice(destinationIndex, 0, {
                    id: cardId,
                    columnId: destinationColumnId,
                })
            }
        })

        return newState
    }
}

function QuoteApp() {
    // const [state, setState] = useState([getItems(10), getItems(5, 10)])

    const [state, dispatch] = useReducer(cardReducer, {
        columns: [],
        columnsItems: [],
    })

    const [toolbarForm] = Form.useForm()
    const [size, setSize] = useState(5)

    const fetchColumns = () => {
        api.get(`http://localhost:3000/columns/`)
            .then((res) => {
                dispatch({ type: 'SET_COLUMNS', payload: res.data })
            })
            .catch((err) => {
                console.log(err)
            })
    }

    const sizeChangeHandler = (value) => {
        const sizeValue = toolbarForm.getFieldValue('size')
        setSize(value)
    }

    const formChangeHandler = () => {
        useDebounce(() => {
            fetchColumns()
        }, [])
    }

    useEffect(() => {
        fetchColumns()
    }, [])

    function onDragEnd(result) {
        const { source, destination } = result

        const sourceColumn = state.columnsItems.find(
            (c) => c.columnId === +source.droppableId + 1
        )

        const cardData = sourceColumn?.data[source.index]

        // console.log({
        //     cardId: cardData.id,
        //     currentColumn: source.droppableId,
        //     targetColumn: destination.droppableId,
        // })

        // console.log( {
        //         cardId: cardData.id,
        //         sourceIndex: source.index,
        //         destinationIndex: destination.index,
        //         currentColumn: +source.droppableId,
        //         targetColumn: destination.droppableId,
        //     })

        dispatch({
            type: 'MOVE_CARD',
            payload: {
                cardId: cardData.id,
                source,
                destination,
            },
        })

        // dropped outside the list
        // if (!destination) {
        //     return
        // }

        // const sInd = +source.droppableId
        // const dInd = +destination.droppableId

        // if (sInd === dInd) {
        //     const items = reorder(state[sInd], source.index, destination.index)
        //     const newState = [...state]
        //     newState[sInd] = items
        //     setState(newState)
        // } else {
        //     const result = move(state[sInd], state[dInd], source, destination)
        //     const newState = [...state]
        //     newState[sInd] = result[sInd]
        //     newState[dInd] = result[dInd]

        //     setState(newState.filter((group) => group.length))
        // }
    }

    return (
        <div>
            <div
                style={{
                    display: 'flex',
                    justifyContent: 'center',
                    overflowX: 'scroll',
                }}
            >
                <DragDropContext onDragEnd={onDragEnd}>
                    <Row gutter={24}>
                        <Col xs={24}>
                            <ToolBar
                                form={toolbarForm}
                                size={size}
                                onFormChange={formChangeHandler}
                                onSizeChange={sizeChangeHandler}
                            />
                        </Col>
                        <Col style={{ display: 'flex' }} xs={8}>
                            {state.columns.map((c, ind) => (
                                <Droppable key={ind} droppableId={`${ind}`}>
                                    {(provided, snapshot) => {
                                        const columnItems =
                                            state.columnsItems[ind]

                                        return (
                                            <div
                                                className="container"
                                                style={{
                                                    margin: '.5rem',
                                                }}
                                            >
                                                <div
                                                    style={{
                                                        display: 'flex',
                                                        justifyContent:
                                                            'center',
                                                        top: '3rem',
                                                        width: '100%',
                                                        position: 'sticky',
                                                        backgroundColor:
                                                            'rgb(165, 165, 165)',
                                                        // backgroundColor:token.colorPrimary,
                                                        padding: '.3rem 0',
                                                        color: 'white',
                                                    }}
                                                >
                                                    ستون شماره {ind}
                                                </div>
                                                <Column
                                                    id={ind + 1}
                                                    provided={provided}
                                                    style={getListStyle(
                                                        snapshot.isDraggingOver
                                                    )}
                                                    columnItems={columnItems}
                                                    state={state}
                                                    dispatch={dispatch}
                                                />
                                            </div>
                                        )
                                    }}
                                </Droppable>
                            ))}
                        </Col>
                    </Row>
                </DragDropContext>
            </div>
        </div>
    )
}

export default QuoteApp

const Column = ({ provided, style, columnItems, state, id, dispatch }) => {
    const fetchCards = (colId, page, size) => {
        api.get(
            `http://localhost:3000/col${colId}?_page=${page}&_per_page=${size}`
        )
            .then((res) => {
                dispatch({
                    type: 'ADD_NEW_CARDS',
                    payload: { columnId: id, responseData: res.data },
                })
            })
            .catch((err) => {
                console.log(err)
            })
    }

    useEffect(() => {
        fetchCards(id, 1, 5)
    }, [])

    // useEffect(() => {
    //     console.log(columnItems)
    // }, [state])

    return (
        <div
            ref={provided.innerRef}
            style={{ ...style, background: 'white' }}
            {...provided.droppableProps}
        >
            <InfiniteScroll
                height={'30rem'}
                width={'500px'}
                style={{
                    display: 'flex',
                    flex: '1 1 auto',
                    flexDirection: 'column',
                    alignItems: 'center',
                    padding: '.5rem 1rem',
                }}
                dataLength={columnItems?.data?.length || 0}
                next={() => {
                    fetchCards(id, columnItems?.next, 5)
                }}
                hasMore={columnItems?.next < columnItems?.last}
                loader={null}
                endMessage={null}
                scrollableTarget="scrollableDiv"
            >
                {columnItems?.data.map((item, index) => (
                    <Draggable
                        key={item.id}
                        draggableId={item.id}
                        index={index}
                    >
                        {(provided, snapshot) => (
                            // <div
                            //     id={44}
                            //     ref={provided.innerRef}
                            //     {...provided.draggableProps}
                            //     {...provided.dragHandleProps}
                            //     style={getItemStyle(
                            //         snapshot.isDragging,
                            //         provided.draggableProps.style
                            //     )}
                            // >
                            //     <div
                            //         style={{
                            //             display: 'flex',
                            //             justifyContent: 'space-around',
                            //         }}
                            //     >
                            //         {item.id}
                            //     </div>
                            // </div>
                            <Card
                                id={item.id}
                                provided={provided}
                                columnId={item.columnId}
                                style={getItemStyle(
                                    snapshot.isDragging,
                                    provided.draggableProps.style
                                )}
                            />
                        )}
                    </Draggable>
                ))}
                {provided.placeholder}
            </InfiniteScroll>
        </div>
    )
}
function Card(props) {
    const { token } = theme.useToken()

    const { provided } = props

    return (
        <div
            style={props.style}
            ref={provided.innerRef}
            {...provided.draggableProps}
            {...provided.dragHandleProps}
        >
            <div
                style={{
                    userSelect: 'none',
                    minWidth: '250px',
                    // maxWidth: '250px',
                    // height:"fit-content",
                    minHeight: 130,
                    margin: '5px 0px',
                    padding: '5px 10px',
                    borderRadius: token.borderRadius,
                    backgroundColor: token.colorBgContainer,
                    border: `1px solid ${token.colorBorderSecondary}`,
                    boxShadow: token.boxShadow,
                    // zIndex: '1000',
                }}
            >
                <Row
                    gutter={24}
                    style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                    }}
                >
                    <Col
                        xs={8}
                        style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            // padding: '5px 10px',
                        }}
                    >
                        <span style={{ fontSize: '12px' }}>
                            <NumberOutlined />{' '}
                            <span>
                                {props.number}
                                {props.id}
                            </span>
                        </span>
                    </Col>

                    <Col lg={13} style={{ padding: '0' }}>
                        <div>
                            <span style={{ fontSize: '12px' }}>عنوان: </span>
                            <span>_</span>
                        </div>
                    </Col>

                    <Col lg={3}>
                        <div style={{ width: 10, cursor: 'move' }}>
                            <HolderOutlined style={{ fontSize: 15 }} />
                        </div>
                    </Col>
                </Row>

                <Row gutter={24}>
                    <Col style={{ margin: '1rem 0' }}>
                        <div style={{ fontSize: '10px' }}>
                            <span>تاریخ ایجاد:</span> <span>1403/2/2</span>
                        </div>
                    </Col>
                </Row>
                <Row
                    gutter={24}
                    style={{ display: 'flex', justifyContent: 'space-between' }}
                >
                    <Col xs={12}>
                        <AvatarGroup role={'مسئول'} data={props.liables} />{' '}
                    </Col>
                    <Col>
                        <AvatarGroup role={'سرپرست'} data={props.supervisors} />
                    </Col>
                </Row>

                <footer>
                    <dl
                        style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            padding: '0 1rem',
                        }}
                    ></dl>
                </footer>
            </div>{' '}
        </div>
    )
}

const ToolBar = ({ form, size, onFormChange, onSizeChange }) => {
    const resoursesList = [
        {
            value: 'lead',
            label: 'سرنخ',
        },
        {
            value: 'account',
            label: 'حساب',
        },
        {
            value: 'oppertunity',
            label: 'فرصت',
        },
        {
            value: 'activity',
            label: 'فعالیت',
        },
        {
            value: 'ticket',
            label: 'تیکت',
        },
        {
            value: 'project',
            label: 'پروژه',
        },
        {
            value: 'icvoice',
            label: 'فاکتور',
        },
        {
            value: 'payment',
            label: 'پرداخت',
        },
    ]

    return (
        <>
            <Form
                form={form}
                onChange={onFormChange}
                style={{
                    position: 'sticky',
                    top: '0',
                    padding: '0.5rem 0.5rem',
                    background: 'white',
                    height: 'fit-content',
                }}
                initialValues={{ size: 5 }}
            >
                <Row
                    style={{ display: 'flex', alignItems: 'center' }}
                    gutter={24}
                >
                    <Col xs={24} lg={8}>
                        <Form.Item
                            style={{ height: 'fit-content', margin: '0' }}
                            name="resource"
                            label={`منبع`}
                        >
                            <Select
                                defaultValue="lead"
                                style={{ width: '100' }}
                                options={resoursesList}
                            />
                        </Form.Item>
                    </Col>

                    <Col xs={24} lg={8}>
                        <Form.Item
                            name="search-query"
                            label={`جستجو`}
                            style={{ height: 'fit-content', margin: '0' }}
                        >
                            <Input />
                        </Form.Item>
                    </Col>

                    <Col xs={24} lg={8}>
                        <Form.Item
                            name="size"
                            label={`اندازه`}
                            style={{ height: 'fit-content', margin: '0' }}
                        >
                            <InputNumber
                                onChange={onSizeChange}
                                defaultValue={size}
                                value={size}
                            />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </>
    )
}
